version: '2.2'
services:
  php-fpm:
    container_name:
      ${PHP_DOCKER_IMAGE}${PHP_DOCKER_VERSION}
    image:
      ${PHP_DOCKER_IMAGE}${PHP_DOCKER_VERSION}
    build:
      context:
        ./${PHP_DOCKER_IMAGE}
      dockerfile: ./Dockerfile
      args:
        - PHP_DOCKER_IMAGE=${PHP_DOCKER_IMAGE}
        - PHP_DOCKER_VERSION=${PHP_DOCKER_VERSION}
        - SUPERVISOR_INSTALL=${SUPERVISOR_INSTALL}
        - CRONTAB_INSTALL=${CRONTAB_INSTALL}
        - SSH_CLIENT_INSTALL=${SSH_CLIENT_INSTALL}
        - SSH_SERVER_INSTALL=${SSH_SERVER_INSTALL}
        - VIM_INSTALL=${VIM_INSTALL}
        - WGET_INSTALL=${WGET_INSTALL}
        - PROCPS_INSTALL=${PROCPS_INSTALL}

        - SOCKETS_INSTALL=${SOCKETS_INSTALL}
        - BCMATH_INSTALL=${BCMATH_INSTALL}
        - SYSVSEM_INSTALL=${SYSVSEM_INSTALL}
        - PCNTL_INSTALL=${PCNTL_INSTALL}
        - OPCACHE_INSTALL=${OPCACHE_INSTALL}
        - PDO_MYSQL_INSTALL=${PDO_MYSQL_INSTALL}
        - PDO_INSTALL=${PDO_INSTALL}
        - MYSQLI_INSTALL=${MYSQLI_INSTALL}
        - ZIP_INSTALL=${ZIP_INSTALL}

        - REDIS_INSTALL=${REDIS_INSTALL}
        - MONGODB_INSTALL=${MONGODB_INSTALL}
        - SWOOLE_INSTALL=${SWOOLE_INSTALL}

        - COMPOSER_INSTALL=${COMPOSER_INSTALL}
        - RABBITMQ_INSTALL=${RABBITMQ_INSTALL}
        - EXIF_INSTALL=${EXIF_INSTALL}
        - INTL_INSTALL=${INTL_INSTALL}
        - PGSQL_INSTALL=${PGSQL_INSTALL}
    restart:
      always
    ports:
      - 9000:${PHP_DOCKER_PORT}
    volumes:
      - ${ENVIRONMENT}${PROJECT_ROOT}:/www
      - ${ENVIRONMENT}/${PHP_DOCKER_IMAGE}/${PHP_DOCKER_IMAGE}${PHP_DOCKER_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${ENVIRONMENT}/${PHP_DOCKER_IMAGE}/php-fpm.conf:/usr/local/etc/php/php-fpm.conf
      - ${ENVIRONMENT}/${PHP_DOCKER_IMAGE}/php-fpm.d:/usr/local/etc/php/php-fpm.d
      - ${ENVIRONMENT}/${PHP_DOCKER_IMAGE}/sources:/etc/apt/sources_list
      - ${ENVIRONMENT}${SUPERVISOR_VERSION}/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${ENVIRONMENT}${SUPERVISOR_VERSION}/logs/:/var/log/supervisor/
    depends_on:
      - mysql
      - redis
      - mongo
      - postgres
      - rabbitmq
    networks:
      - workspace

  mysql:
    container_name:
      ${MYSQL_VERSION}
    image:
      ${MYSQL_VERSION}
    build:
      ${MYSQL_VERSION}
    restart:
      always
    ports:
      - 3306:${MYSQL_PORT}
    volumes:
      - ${ENVIRONMENT}${MYSQL_VERSION}/data:/var/lib/mysql
      - ${ENVIRONMENT}${MYSQL_VERSION}/my.cnf:/etc/my.cnf
      - ${ENVIRONMENT}${MYSQL_VERSION}/logs:/var/logs
    command:
      --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - workspace

  nginx:
    container_name:
      ${NGINX_VERSION}
    image:
      ${NGINX_VERSION}
    build:
      ${NGINX_VERSION}
    restart:
      always
    ports:
      - 80:${NGINX_PORT}
    volumes:
      - ${ENVIRONMENT}${PROJECT_ROOT}:/www
      - ${ENVIRONMENT}${NGINX_VERSION}/logs:/etc/nginx/logs/
      - ${ENVIRONMENT}${NGINX_VERSION}:/etc/nginx/
    depends_on:
      - php-fpm
    networks:
      - workspace

  redis:
    container_name:
      ${REDIS_VERSION}
    image:
      ${REDIS_VERSION}
    build:
      ${REDIS_VERSION}
    restart:
      always
    ports:
      - 6379:${REDIS_PORT}
    volumes:
      - ${ENVIRONMENT}${REDIS_VERSION}/data:/data
      - ${ENVIRONMENT}${REDIS_VERSION}/redis.conf:/usr/local/etc/redis.conf
      - ${ENVIRONMENT}${REDIS_VERSION}/logs:/var/logs
    networks:
      - workspace

  mongo:
    container_name:
      ${MONGO_VERSION}
    image:
      ${MONGO_VERSION}
    build:
      ${MONGO_VERSION}
    restart:
      always
    ports:
      - 27017:${MONGO_PORT}
    volumes:
      - ${ENVIRONMENT}${MONGO_VERSION}/data:/data/db
      - ${ENVIRONMENT}${MONGO_VERSION}/mongod.conf:/etc/mongod.conf
      - ${ENVIRONMENT}${MONGO_VERSION}/logs:/var/logs
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - workspace

  postgres:
    container_name:
      ${POSTGRES_VERSION}
    image:
      ${POSTGRES_VERSION}
    build:
      ${POSTGRES_VERSION}
    restart:
      always
    ports:
      - 5432:${POSTGRES_PORT}
    volumes:
      - ${ENVIRONMENT}${POSTGRES_VERSION}/data:/var/lib/postgresql/data
      - ${ENVIRONMENT}${POSTGRES_VERSION}/logs:/var/logs
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_INITDB_WALDIR: /var/logs
      PGDATA: /var/lib/postgresql/data
    networks:
      - workspace

  rabbitmq:
    container_name:
      ${RABBITMQ_VERSION}
    image:
      ${RABBITMQ_VERSION}
    build:
      ${RABBITMQ_VERSION}
    restart:
      always
    ports:
      - 5672:${RABBITMQ_PORT_PROGRAM}
      - 15672:${RABBITMQ_PORT_ADMIN}
    volumes:
      - ${ENVIRONMENT}${RABBITMQ_VERSION}/data/:/var/lib/rabbitmq/
      - ${ENVIRONMENT}${RABBITMQ_VERSION}/logs/:/var/log/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - workspace

  elasticsearch:
    container_name:
      ${ELASTICSEARCH_VERSION}
    image:
      ${ELASTICSEARCH_VERSION}
    build:
      ${ELK_DIRECTORY}${ELASTICSEARCH_VERSION}
    restart:
      always
    ports:
      - 9200:${ELASTICSEARCH_PORT_HTTP}
      - 9300:${ELASTICSEARCH_PORT_TCP}
    volumes:
      - ${ENVIRONMENT}${ELK_DIRECTORY}${ELASTICSEARCH_VERSION}/data:/usr/share/elasticsearch/data
      - ${ENVIRONMENT}${ELK_DIRECTORY}${ELASTICSEARCH_VERSION}/elasticsearch.yml:/usr/share/elasticsearch/elasticsearch.yml
    environment:
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE}
      - ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS}
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
    networks:
      - workspace

  kibana:
    container_name:
      ${KIBANA_VERSION}
    image:
      ${KIBANA_VERSION}
    build:
      ${ELK_DIRECTORY}${KIBANA_VERSION}
    ports:
      - 5601:${KIBANA_PORT}
    volumes:
      - ${ENVIRONMENT}${ELK_DIRECTORY}${KIBANA_VERSION}/kibana.yml:/usr/share/kibana/kibana.yml:rw
    environment:
      - elasticsearch.hosts=${ELK_HOSTS}/${ELASTICSEARCH_PORT_HTTP}
    depends_on:
      - elasticsearch
    networks:
      - workspace

  logstash:
    container_name:
      ${LOGSTASH_VERSION}
    image:
      ${LOGSTASH_VERSION}
    build:
      ${ELK_DIRECTORY}${LOGSTASH_VERSION}
    restart:
      always
    ports:
      - 4560:${LOGSTASH_PORT}
    volumes:
      - ${ENVIRONMENT}${ELK_DIRECTORY}${LOGSTASH_VERSION}/logstash.conf:/usr/share/logstash/logstash.conf
    links:
      - elasticsearch:${ELK_HOSTS}
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - workspace

networks:
  workspace:
    driver: bridge
